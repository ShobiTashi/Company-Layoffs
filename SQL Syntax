select * 
from world_layoffs.layoffs;

--- Creating a duplicate table to avoid errors in the raw data of the actual table
create table layoffs_1
like layoffs;

insert into layoffs_1
select *
from layoffs;

select *
from layoffs_1;

--- Removing duplicates using CTEs and row number
select *,
row_number() over (partition by company,location,industry,total_laid_off,percentage_laid_off,'date',stage,country,funds_raised_millions) as row_num
from layoffs_1;

with cte_duplicate as
(select *,
row_number() over (partition by company,location,industry,total_laid_off,percentage_laid_off,'date',stage,country,funds_raised_millions) as row_num
from layoffs_1)
select *
from cte_duplicate
where row_num >1;

      -- Creating a new table in order to delete the duplicates in MySQL
CREATE TABLE `layoffs_2` (
  `company` text,
  `location` text,
  `industry` text,
  `total_laid_off` int DEFAULT NULL,
  `percentage_laid_off` text,
  `date` text,
  `stage` text,
  `country` text,
  `funds_raised_millions` int DEFAULT NULL,
  `row_num` int
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

select *
from layoffs_2;

insert into layoffs_2
(select *,
row_number() over (partition by company,location,industry,total_laid_off,percentage_laid_off,'date',stage,country,funds_raised_millions) as row_num
from layoffs_1);

delete from layoffs_2
where row_num>1;


--- Standardizing the data by finding issues and fixing them
     -- Company column
select company, trim(company)
from layoffs_2;

update layoffs_2
set company=  trim(company);

     -- Industry column for crypto industry
select industry
from layoffs_2
where industry like 'crypto%';

update layoffs_2
set industry= 'crypto'
where industry like 'crypto%';

     -- Date column
select `date`, str_to_date(`date`,'%m/%d/%Y')
from layoffs_2;

update layoffs_2
set `date` = str_to_date(`date`,'%m/%d/%Y');

alter table layoffs_2
modify column `date` DATE;

select *
from layoffs_2;

     -- Country column
select distinct country, trim(trailing '.' from country)
from layoffs_2
order by country;

update layoffs_2
set country=  trim(trailing '.' from country)
where country like 'united states%';


--- Removing Null and Blank values
   -- Coverting the blank values to null values too make it easier to update
update layoffs_2
set industry = null
where industry = '';

   -- Populating the blanks by using JOIN
select l1.industry,l2.industry
from layoffs_2 l1
join layoffs_2 l2
on l1.company=l2.company
where l1.industry is null and l2.industry is not null;	
   
   -- Updating the table
update layoffs_2 l1
join layoffs_2 l2
on l1.company=l2.company
set l1.industry=l2.industry
where l1.industry is null 
and l2.industry is not null;

   -- Deleting null values for percentage_laid_off and total_laid_off columns as they are not useful in this case
select *
from layoffs_2
where percentage_laid_off is null
and total_laid_off is null;

delete
from layoffs_2
where percentage_laid_off is null
and total_laid_off is null;

---	Deleting the row number
alter table layoffs_2
drop column row_num;


-- Descriptive/Exploratory Questions
   --- What companies had the highest number of layoffs?
select company, sum(total_laid_off) laid_off
from layoffs_2
group by company
order by laid_off desc
limit 10;

   --- What are the most affected industries by total layoffs?
select industry, sum(total_laid_off) as total_laid_off
from layoffs_2
group by industry
order by total_laid_off desc;

   --- Which countries had the highest layoffs?
select country, sum(total_laid_off)  as total_laid_off
from layoffs_2
group by country
order by total_laid_off desc;

   --- How many companies have layoffs recorded at each funding stage?
select stage, count(*) as company_count
from layoffs_2
group by stage
order by company_count desc;

   --- What is the smallest layoff reported in each industry?
select industry, min(total_laid_off) as min_layoffs
from layoffs_2
group by industry
order by min_layoffs desc;

   --- Which company had the single largest layoff, and what stage was it in?
select company, stage, max(total_laid_off) as max_layoffs
from layoffs_2
group by company, stage
order by max_layoffs desc
limit 1;


-- Comparative Questions
   --- Which funding stage saw the most layoffs?
select stage, sum(total_laid_off) as total_laid_off
from layoffs_2
group by stage
order by total_laid_off desc;

   --- Is there a correlation between high funding (e.g > 100M) and high layoffs?
select *
from layoffs_2
where funds_raised_millions > 100
order by total_laid_off desc;


-- Percentage Based Insights
   --- Which companies laid off the highest percentage of their staff?
select company, sum(percentage_laid_off)
from layoffs_2
group by company
order by 2 desc
limit 10;

   --- Are startups at later stages (Series C or D) laying off more people on average?
select stage, round(avg(percentage_laid_off), 1) as avg_perc_laid_off
from layoffs_2
group by stage
order by stage desc;

   --- What is the average percentage of staff laid off per industry?
select industry, round(avg(percentage_laid_off), 1) as avg_pct_laid_off
from layoffs_2
group by industry
order by avg_pct_laid_off desc;

   --- How many companies laid off more than 50% of their staff, versus less than or equal to 50%
select 
case
when percentage_laid_off>0.50 then 'Above 50%'
else '50% or less'
end as layoff_category,
count(*) as company_count
from layoffs_2
group by layoff_category;


-- Bonus Question
   --- What is the Layoff summary by stage: total layoffs, average % laid off, and company count
select stage,
	sum(total_laid_off) as total_laid_off,
	round(avg(percentage_laid_off),1) as avg_percentage,
	count(distinct company) as company_count
from layoffs_2
group by stage
order by total_laid_off desc;
