Select * 
From world_layoffs.layoffs;

--- Creating a duplicate table to avoid errors in the raw data of the actual table
Create table layoffs_1
Like layoffs;

Insert into layoffs_1
Select *
From layoffs;

Select *
From layoffs_1;

--- Removing duplicates using CTEs and row number
Select *,
Row_number() over (partition by company,location,industry,total_laid_off,percentage_laid_off,'date',stage,country,funds_raised_millions) as row_num
From layoffs_1;

With cte_duplicate as
(select *,
Row_number() over (partition by company,location,industry,total_laid_off,percentage_laid_off,'date',stage,country,funds_raised_millions) as row_num
From layoffs_1)
Select *
From cte_duplicate
Where row_num >1;

      -- Creating a new table in order to delete the duplicates in MySQL
CREATE TABLE `layoffs_2` (
  `company` text,
  `location` text,
  `industry` text,
  `total_laid_off` int DEFAULT NULL,
  `percentage_laid_off` text,
  `date` text,
  `stage` text,
  `country` text,
  `funds_raised_millions` int DEFAULT NULL,
  `row_num` int
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

Select *
From layoffs_2;

Insert into layoffs_2
(select *,
Row_number() over (partition by company,location,industry,total_laid_off,percentage_laid_off,'date',stage,country,funds_raised_millions) as row_num
From layoffs_1);

Delete from layoffs_2
Where row_num>1;


--- Standardizing the data by finding issues and fixing them
     -- Company column
Select company, trim(company)
From layoffs_2;

Update layoffs_2
Set company=  trim(company);

     -- Industry column for crypto industry
Select industry
From layoffs_2
Where industry like 'crypto%';

Update layoffs_2
Set industry= 'crypto'
Where industry like 'crypto%';

     -- Date column
Select `date`, str_to_date(`date`,'%m/%d/%Y')
From layoffs_2;

Update layoffs_2
Set `date` = str_to_date(`date`,'%m/%d/%Y');

Alter table layoffs_2
Modify column `date` DATE;

Select *
From layoffs_2;

     -- Country column
Select distinct country, trim(trailing '.' from country)
From layoffs_2
Order by country;

Update layoffs_2
Set country=  trim(trailing '.' from country)
Where country like 'united states%';


--- Removing Null and Blank values
   -- Coverting the blank values to null values too make it easier to update
Update layoffs_2
Set industry = null
Where industry = '';

   -- Populating the blanks by using JOIN
Select l1.industry,l2.industry
From layoffs_2 l1
Join layoffs_2 l2
On l1.company=l2.company
Where l1.industry is null and l2.industry is not null;	
   
   -- Updating the table
Update layoffs_2 l1
Join layoffs_2 l2
On l1.company=l2.company
Set l1.industry=l2.industry
Where l1.industry is null 
And l2.industry is not null;

   -- Deleting null values for percentage_laid_off and total_laid_off columns as they are not useful in this case
Select *
From layoffs_2
Where percentage_laid_off is null
And total_laid_off is null;

Delete
From layoffs_2
Where percentage_laid_off is null
And total_laid_off is null;

---	Deleting the row number
Alter table layoffs_2
Drop column row_num;


-- Descriptive/Exploratory Questions
   --- What companies had the highest number of layoffs?
Select company, sum(total_laid_off) laid_off
From layoffs_2
Group by company
Order by laid_off desc
Limit 10;

   --- What are the most affected industries by total layoffs?
Select industry, sum(total_laid_off) as total_laid_off
From layoffs_2
Group by industry
Order by total_laid_off desc;

   --- Which countries had the highest layoffs?
Select country, sum(total_laid_off)  as total_laid_off
From layoffs_2
Group by country
Order by total_laid_off desc;

   --- How many companies have layoffs recorded at each funding stage?
Select stage, count(*) as company_count
From layoffs_2
Group by stage
Order by company_count desc;

   --- What is the smallest layoff reported in each industry?
Select industry, min(total_laid_off) as min_layoffs
From layoffs_2
Group by industry
Order by min_layoffs desc;

   --- Which company had the single largest layoff, and what stage was it in?
Select company, stage, max(total_laid_off) as max_layoffs
From layoffs_2
Group by company, stage
Order by max_layoffs desc
Limit 1;


-- Comparative Questions
   --- Which funding stage saw the most layoffs?
Select stage, sum(total_laid_off) as total_laid_off
From layoffs_2
Group by stage
Order by total_laid_off desc;

   --- Is there a correlation between high funding (e.g > 100M) and high layoffs?
Select *
From layoffs_2
Where funds_raised_millions > 100
Order by total_laid_off desc;


-- Percentage Based Insights
   --- Which companies laid off the highest percentage of their staff?
Select company, sum(percentage_laid_off)
From layoffs_2
Group by company
Order by 2 desc
Limit 10;

   --- Are startups at later stages (Series C or D) laying off more people on average?
Select stage, round(avg(percentage_laid_off), 1) as avg_perc_laid_off
From layoffs_2
Group by stage
Order by stage desc;

   --- What is the average percentage of staff laid off per industry?
Select industry, round(avg(percentage_laid_off), 1) as avg_pct_laid_off
From layoffs_2
Group by industry
Order by avg_pct_laid_off desc;

   --- How many companies laid off more than 50% of their staff, versus less than or equal to 50%
Select 
Case
When percentage_laid_off>0.50 then 'Above 50%'
Else '50% or less'
End as layoff_category,
Count(*) as company_count
From layoffs_2
Group by layoff_category;


-- Bonus Question
   --- What is the Layoff summary by stage: total layoffs, average % laid off, and company count
Select stage,
	sum(total_laid_off) as total_laid_off,
	round(avg(percentage_laid_off),1) as avg_percentage,
	count(distinct company) as company_count
From layoffs_2
Group by stage
Order by total_laid_off desc;
